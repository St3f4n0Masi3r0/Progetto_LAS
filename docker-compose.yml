version: "3"

services:
    backend:
        container_name: backend
        build: webserver/backend/
        image: backend
        ports:
        - "3001:3001"
        depends_on:
            - mongodb1
            - mongodb2
            - mongodb3
        networks:
            - Internal
        restart: unless-stopped
    
    frontend:
        container_name: frontend
        build: webserver/frontend/
        image: frontend
        ports:
        - "8080:8080"
        depends_on:
            - backend
        networks:
            - Internal
        restart: unless-stopped
    

    reverseproxy:
        build: reverseproxy/
        image: reverseproxy
        container_name: reverseproxy
        networks:
            - Internal
            - External
        ports:
            - "80:80"
            - "443:443"
        volumes:
        - ./reverseproxy/contents/certificates:/etc/nginx/ssl
        depends_on:
            - frontend
        restart: unless-stopped

    mongodb1:
        container_name: mongodb1
        image: mongo
        restart: always
        ports:
        - "27017:27017"
        command: mongod --replSet rs0 --port 27017 --bind_ip_all
        healthcheck:
            test: test $$(echo "rs.initiate({_id:'rs0',members:[{_id:0,host:\"mongodb1:27017\"},{_id:1,host:\"mongodb2:27018\"},{_id:2,host:\"mongodb3:27019\"}]}).ok || rs.status().ok" | mongosh --port 27017 --quiet) -eq 1
            interval: 10s
            start_period: 30s
            timeout: 60s
        networks:
            - Internal
            
    mongodb2:
        container_name: mongodb2
        image: mongo
        restart: always
        ports:
        - "27018:27018"
        command: mongod --replSet rs0 --port 27018 --bind_ip_all
        networks:
            - Internal
        depends_on:
            - mongodb1

    mongodb3:
        container_name: mongodb3
        image: mongo
        restart: always
        ports:
        - "27019:27019"
        command: mongod --replSet rs0 --port 27019 --bind_ip_all
        networks:
            - Internal 
        depends_on:
            - mongodb1

    nginx-prometheus-exporter:
        image: nginx/nginx-prometheus-exporter
        ports:
        - 9113:9113
        environment:
            SCRAPE_URI: http://reverseproxy/metrics
            NGINX_RETRIES: 10
        networks:
        - Internal
        depends_on:
            - reverseproxy
    
    mongodb-exporter:
        image: percona/mongodb_exporter:2.37.0
        command:
            - '--mongodb.uri=mongodb://mongodb1:27017'
            - '--collect-all'
        container_name: mongodb-exporter
        restart: always
        ports:
            - "9216:9216"
        networks:
            - Internal
        depends_on:
            - mongodb1
            - mongodb2
            - mongodb3
    

    prometheus:
        image: prom/prometheus
        ports:
        - 9090:9090
        networks:
        - Internal
        volumes:
        - ./monitoring/promethus:/etc/prometheus
        command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        depends_on:
            - nginx-prometheus-exporter
            - mongodb-exporter

    grafana:
        image: grafana/grafana
        container_name: grafana
        restart: unless-stopped
        ports:
        - "3000:3000"
        networks:
        - Internal
        - External
        environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=password
        volumes:
        - ./monitoring/grafana:/var/lib/grafana
        depends_on:
        - prometheus

networks:
    Internal:
        internal: true
    External:
